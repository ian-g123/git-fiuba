use std::io::Cursor;

use git_lib::{git_repository::GitRepository, logger::Logger, objects::git_object::GitObjectTrait};

#[test]
#[ignore = "git-lib/tests/data/packfile-database.zip must be extracted before running the test"]
fn test() {
    let repo_path = "tests/data/packfile/simple_packfile";
    let output = Vec::new();

    let mut output_writer = Cursor::new(output);
    let mut repo = GitRepository::open(repo_path, &mut output_writer).unwrap();
    let commits = repo.get_log(true).unwrap();
    let (commit, _, _) = commits.get(0).unwrap().to_owned();
    assert_eq!(commit.get_message(), "initialcommit");
    let tree = repo
        .db()
        .unwrap()
        .to_owned()
        .read_object(&commit.get_tree_hash_string(), &mut Logger::new_dummy())
        .unwrap()
        .as_mut_tree()
        .unwrap()
        .to_owned();
    let tree_entries = tree.get_objects();
    assert_eq!(tree_entries.len(), 1);
    println!("{:?}", tree_entries);
    let (hash, object) = tree_entries.get("file").unwrap();
    let mut object = object.to_owned().unwrap().as_mut_blob().unwrap().to_owned();
    assert_eq!(
        object.get_hash_string().unwrap(),
        "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"
    );
    assert_eq!(&object.get_hash().unwrap(), hash);
    assert_eq!(object.content(None).unwrap(), "".as_bytes());
    let _ = std::fs::remove_dir_all(repo_path);
}

#[test]
#[ignore = "git-lib/tests/data/packfile/simple_delta.zip must be extracted before running the test"]
fn test_undeltified_objects() {
    let repo_path = "tests/data/packfile/simple_delta";
    let output = Vec::new();

    let mut output_writer = Cursor::new(output);
    let mut repo = GitRepository::open(repo_path, &mut output_writer).unwrap();
    let commits = repo.get_log(true).unwrap();

    for (mut commit, _, _) in commits {
        match commit.get_hash().unwrap() {
            [117, 117, 203, 199, 187, 45, 195, 211, 206, 11, 158, 164, 115, 45, 96, 213, 65, 62, 189, 175] =>
            {
                assert_eq!(commit.get_message(), "filem");
            }
            [197, 118, 184, 99, 35, 187, 160, 75, 113, 172, 148, 232, 48, 218, 252, 198, 97, 158, 188, 209] =>
            {
                assert_eq!(commit.get_message(), "file");
            }
            [219, 150, 53, 21, 136, 15, 152, 200, 67, 93, 242, 206, 144, 46, 79, 51, 122, 172, 126, 166] =>
            {
                assert_eq!(commit.get_message(), "initialcommit");
            }
            _ => panic!("Unexpected commit hash"),
        }
    }
    let _ = std::fs::remove_dir_all(repo_path);
}

#[test]
#[ignore = "git-lib/tests/data/packfile/big_delta.zip must be extracted before running the test"]
fn test_delta_offset() {
    let repo_path = "tests/data/packfile/big_delta";
    let output = Vec::new();
    let mut output_writer = Cursor::new(output);
    let repo = GitRepository::open(repo_path, &mut output_writer).unwrap();
    let mut several_layers_delta_ofs_object = repo
        .db()
        .unwrap()
        .to_owned()
        .read_object(
            "23f463ce8aab63ad825d3cd64d3392d439dd325a",
            &mut Logger::new_dummy(),
        )
        .unwrap();
    assert_eq!(
        several_layers_delta_ofs_object.get_hash_string().unwrap(),
        "23f463ce8aab63ad825d3cd64d3392d439dd325a"
    );
    assert_eq!(
        several_layers_delta_ofs_object.content(None).unwrap(),
        [
            105, 109, 112, 111, 114, 116, 32, 114, 97, 110, 100, 111, 109, 10, 105, 109, 112, 111,
            114, 116, 32, 116, 105, 109, 101, 10, 10, 105, 109, 112, 111, 114, 116, 32, 110, 117,
            109, 112, 121, 32, 97, 115, 32, 110, 112, 10, 102, 114, 111, 109, 32, 97, 108, 103,
            111, 114, 105, 116, 109, 111, 115, 32, 105, 109, 112, 111, 114, 116, 32, 86, 105, 100,
            101, 111, 44, 32, 118, 105, 100, 101, 111, 115, 95, 111, 114, 100, 101, 110, 97, 100,
            111, 115, 95, 100, 101, 95, 102, 111, 114, 109, 97, 95, 111, 112, 116, 105, 109, 97,
            10, 105, 109, 112, 111, 114, 116, 32, 109, 97, 116, 112, 108, 111, 116, 108, 105, 98,
            46, 112, 121, 112, 108, 111, 116, 32, 97, 115, 32, 112, 108, 116, 10, 102, 114, 111,
            109, 32, 115, 99, 105, 112, 121, 46, 111, 112, 116, 105, 109, 105, 122, 101, 32, 105,
            109, 112, 111, 114, 116, 32, 99, 117, 114, 118, 101, 95, 102, 105, 116, 10, 10, 10,
            100, 101, 102, 32, 116, 105, 101, 109, 112, 111, 95, 101, 106, 101, 99, 117, 99, 105,
            111, 110, 40, 118, 105, 100, 101, 111, 115, 41, 58, 10, 32, 32, 32, 32, 116, 105, 101,
            109, 112, 111, 95, 105, 110, 105, 99, 105, 97, 108, 32, 61, 32, 116, 105, 109, 101, 46,
            116, 105, 109, 101, 40, 41, 10, 32, 32, 32, 32, 118, 105, 100, 101, 111, 115, 95, 111,
            114, 100, 101, 110, 97, 100, 111, 115, 95, 100, 101, 95, 102, 111, 114, 109, 97, 95,
            111, 112, 116, 105, 109, 97, 40, 118, 105, 100, 101, 111, 115, 41, 10, 32, 32, 32, 32,
            116, 105, 101, 109, 112, 111, 95, 102, 105, 110, 97, 108, 32, 61, 32, 116, 105, 109,
            101, 46, 116, 105, 109, 101, 40, 41, 10, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110,
            32, 116, 105, 101, 109, 112, 111, 95, 102, 105, 110, 97, 108, 32, 45, 32, 116, 105,
            101, 109, 112, 111, 95, 105, 110, 105, 99, 105, 97, 108, 10, 10, 100, 101, 102, 32,
            103, 101, 110, 101, 114, 97, 114, 95, 118, 105, 100, 101, 111, 115, 95, 97, 108, 101,
            97, 116, 111, 114, 105, 111, 115, 40, 99, 97, 110, 116, 95, 118, 105, 100, 101, 111,
            115, 41, 58, 10, 32, 32, 32, 32, 118, 105, 100, 101, 111, 115, 32, 61, 32, 91, 93, 10,
            32, 32, 32, 32, 102, 111, 114, 32, 95, 32, 105, 110, 32, 114, 97, 110, 103, 101, 40,
            99, 97, 110, 116, 95, 118, 105, 100, 101, 111, 115, 41, 58, 10, 32, 32, 32, 32, 32, 32,
            32, 32, 118, 105, 100, 101, 111, 115, 46, 97, 112, 112, 101, 110, 100, 40, 86, 105,
            100, 101, 111, 40, 114, 97, 110, 100, 111, 109, 46, 114, 97, 110, 100, 105, 110, 116,
            40, 49, 44, 32, 57, 57, 57, 57, 57, 41, 44, 32, 114, 97, 110, 100, 111, 109, 46, 114,
            97, 110, 100, 105, 110, 116, 40, 49, 44, 32, 57, 57, 57, 57, 57, 41, 41, 41, 10, 32,
            32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 118, 105, 100, 101, 111, 115, 10, 10,
            100, 101, 102, 32, 109, 97, 105, 110, 40, 41, 58, 10, 32, 32, 32, 32, 99, 97, 110, 116,
            105, 100, 97, 100, 95, 101, 108, 101, 109, 101, 110, 116, 111, 115, 32, 61, 32, 91, 93,
            10, 32, 32, 32, 32, 116, 105, 101, 109, 112, 111, 115, 95, 101, 106, 101, 99, 117, 99,
            105, 111, 110, 32, 61, 32, 91, 93, 10, 10, 32, 32, 32, 32, 97, 110, 116, 101, 114, 105,
            111, 114, 32, 61, 32, 48, 10, 32, 32, 32, 32, 10, 32, 32, 32, 32, 102, 111, 114, 32,
            110, 32, 105, 110, 32, 114, 97, 110, 103, 101, 40, 49, 44, 49, 48, 48, 48, 41, 58, 10,
            32, 32, 32, 32, 32, 32, 32, 32, 99, 97, 110, 116, 105, 100, 97, 100, 32, 61, 32, 49,
            48, 42, 110, 10, 32, 32, 32, 32, 32, 32, 32, 32, 105, 102, 32, 99, 97, 110, 116, 105,
            100, 97, 100, 32, 33, 61, 32, 97, 110, 116, 101, 114, 105, 111, 114, 58, 10, 32, 32,
            32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 118, 105, 100, 101, 111, 115, 95, 101, 106,
            101, 109, 112, 108, 111, 32, 61, 32, 103, 101, 110, 101, 114, 97, 114, 95, 118, 105,
            100, 101, 111, 115, 95, 97, 108, 101, 97, 116, 111, 114, 105, 111, 115, 40, 99, 97,
            110, 116, 105, 100, 97, 100, 41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
            99, 97, 110, 116, 105, 100, 97, 100, 95, 101, 108, 101, 109, 101, 110, 116, 111, 115,
            46, 97, 112, 112, 101, 110, 100, 40, 99, 97, 110, 116, 105, 100, 97, 100, 41, 10, 32,
            32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 116, 105, 101, 109, 112, 111, 115, 95, 101,
            106, 101, 99, 117, 99, 105, 111, 110, 46, 97, 112, 112, 101, 110, 100, 40, 116, 105,
            101, 109, 112, 111, 95, 101, 106, 101, 99, 117, 99, 105, 111, 110, 40, 118, 105, 100,
            101, 111, 115, 95, 101, 106, 101, 109, 112, 108, 111, 41, 32, 42, 32, 49, 48, 48, 48,
            41, 10, 32, 32, 32, 32, 32, 32, 32, 32, 97, 110, 116, 101, 114, 105, 111, 114, 32, 61,
            32, 99, 97, 110, 116, 105, 100, 97, 100, 32, 10, 10, 10, 32, 32, 32, 32, 120, 32, 61,
            32, 110, 112, 46, 97, 114, 114, 97, 121, 40, 99, 97, 110, 116, 105, 100, 97, 100, 95,
            101, 108, 101, 109, 101, 110, 116, 111, 115, 41, 10, 32, 32, 32, 32, 121, 32, 61, 32,
            110, 112, 46, 97, 114, 114, 97, 121, 40, 116, 105, 101, 109, 112, 111, 115, 95, 101,
            106, 101, 99, 117, 99, 105, 111, 110, 41, 10, 10, 32, 32, 32, 32, 35, 32, 82, 101, 103,
            114, 101, 115, 105, 195, 179, 110, 32, 76, 105, 110, 101, 97, 108, 10, 32, 32, 32, 32,
            99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 115, 32, 61, 32, 110, 112, 46,
            112, 111, 108, 121, 102, 105, 116, 40, 120, 44, 32, 121, 44, 32, 49, 41, 10, 32, 32,
            32, 32, 115, 108, 111, 112, 101, 44, 32, 105, 110, 116, 101, 114, 99, 101, 112, 116,
            32, 61, 32, 99, 111, 101, 102, 102, 105, 99, 105, 101, 110, 116, 115, 10, 32, 32, 32,
            32, 108, 105, 110, 101, 97, 114, 95, 114, 101, 103, 114, 101, 115, 115, 105, 111, 110,
            95, 108, 105, 110, 101, 32, 61, 32, 115, 108, 111, 112, 101, 32, 42, 32, 120, 32, 43,
            32, 105, 110, 116, 101, 114, 99, 101, 112, 116, 10, 10, 32, 32, 32, 32, 35, 32, 82,
            101, 103, 114, 101, 115, 105, 195, 179, 110, 32, 76, 111, 103, 97, 114, 195, 173, 116,
            109, 105, 99, 97, 10, 32, 32, 32, 32, 100, 101, 102, 32, 110, 95, 108, 111, 103, 110,
            95, 102, 117, 110, 99, 116, 105, 111, 110, 40, 120, 44, 32, 97, 41, 58, 10, 32, 32, 32,
            32, 32, 32, 32, 32, 114, 101, 116, 117, 114, 110, 32, 97, 32, 42, 32, 120, 32, 42, 32,
            110, 112, 46, 108, 111, 103, 40, 120, 41, 10, 32, 32, 32, 32, 112, 97, 114, 97, 109,
            115, 44, 32, 99, 111, 118, 97, 114, 105, 97, 110, 99, 101, 32, 61, 32, 99, 117, 114,
            118, 101, 95, 102, 105, 116, 40, 110, 95, 108, 111, 103, 110, 95, 102, 117, 110, 99,
            116, 105, 111, 110, 44, 32, 120, 44, 32, 121, 41, 10, 32, 32, 32, 32, 97, 32, 61, 32,
            112, 97, 114, 97, 109, 115, 91, 48, 93, 10, 32, 32, 32, 32, 108, 111, 103, 97, 114,
            105, 116, 109, 105, 99, 95, 114, 101, 103, 114, 101, 115, 115, 105, 111, 110, 95, 108,
            105, 110, 101, 32, 61, 32, 97, 32, 42, 32, 120, 32, 42, 32, 110, 112, 46, 108, 111,
            103, 40, 120, 41, 10, 10, 32, 32, 32, 32, 35, 32, 71, 114, 97, 102, 105, 99, 97, 114,
            10, 32, 32, 32, 32, 112, 108, 116, 46, 115, 99, 97, 116, 116, 101, 114, 40, 120, 44,
            32, 121, 44, 32, 108, 97, 98, 101, 108, 61, 39, 84, 105, 101, 109, 112, 111, 32, 100,
            101, 32, 101, 106, 101, 99, 117, 99, 105, 195, 179, 110, 39, 44, 32, 109, 97, 114, 107,
            101, 114, 61, 39, 111, 39, 44, 32, 99, 111, 108, 111, 114, 61, 39, 98, 108, 117, 101,
            39, 41, 10, 32, 32, 32, 32, 112, 108, 116, 46, 112, 108, 111, 116, 40, 120, 44, 32,
            108, 105, 110, 101, 97, 114, 95, 114, 101, 103, 114, 101, 115, 115, 105, 111, 110, 95,
            108, 105, 110, 101, 44, 32, 108, 97, 98, 101, 108, 61, 39, 82, 101, 103, 114, 101, 115,
            105, 195, 179, 110, 32, 76, 105, 110, 101, 97, 114, 39, 44, 32, 108, 105, 110, 101,
            115, 116, 121, 108, 101, 61, 39, 45, 39, 44, 32, 99, 111, 108, 111, 114, 61, 39, 114,
            101, 100, 39, 41, 10, 32, 32, 32, 32, 112, 108, 116, 46, 112, 108, 111, 116, 40, 120,
            44, 32, 108, 111, 103, 97, 114, 105, 116, 109, 105, 99, 95, 114, 101, 103, 114, 101,
            115, 115, 105, 111, 110, 95, 108, 105, 110, 101, 44, 32, 108, 97, 98, 101, 108, 61, 39,
            82, 101, 103, 114, 101, 115, 105, 195, 179, 110, 32, 110, 32, 108, 111, 103, 32, 110,
            39, 44, 32, 108, 105, 110, 101, 115, 116, 121, 108, 101, 61, 39, 45, 39, 44, 32, 99,
            111, 108, 111, 114, 61, 39, 103, 114, 101, 101, 110, 39, 41, 10, 10, 32, 32, 32, 32,
            35, 32, 65, 100, 100, 32, 108, 97, 98, 101, 108, 115, 32, 97, 110, 100, 32, 97, 32,
            108, 101, 103, 101, 110, 100, 10, 32, 32, 32, 32, 112, 108, 116, 46, 120, 108, 97, 98,
            101, 108, 40, 39, 67, 97, 110, 116, 105, 100, 97, 100, 32, 100, 101, 32, 101, 108, 101,
            109, 101, 110, 116, 111, 115, 39, 41, 10, 32, 32, 32, 32, 112, 108, 116, 46, 121, 108,
            97, 98, 101, 108, 40, 39, 84, 105, 101, 109, 112, 111, 32, 100, 101, 32, 101, 106, 101,
            99, 117, 99, 105, 195, 179, 110, 32, 40, 109, 115, 41, 39, 41, 10, 32, 32, 32, 32, 112,
            108, 116, 46, 108, 101, 103, 101, 110, 100, 40, 41, 10, 32, 32, 32, 32, 112, 108, 116,
            46, 115, 97, 118, 101, 102, 105, 103, 40, 39, 116, 105, 101, 109, 112, 111, 115, 95,
            101, 106, 101, 99, 117, 99, 105, 111, 110, 46, 112, 110, 103, 39, 41, 10, 32, 32, 32,
            32, 112, 108, 116, 46, 115, 104, 111, 119, 40, 41, 10, 10, 10, 109, 97, 105, 110, 40,
            41
        ]
    );
    let _ = std::fs::remove_dir_all(repo_path);
}

#[test]
#[ignore = "git-lib/tests/data/packfile/really_big_delta.zip must be extracted before running the test"]
fn test_delta_ref_object() {
    let repo_path = "tests/data/packfile/really_big_delta";
    let logs_path = "tests/data/packfile/really_big_delta/logs.log";
    let output = Vec::new();
    let mut output_writer = Cursor::new(output);
    let repo = GitRepository::open(repo_path, &mut output_writer).unwrap();
    let mut logger = Logger::new(logs_path).unwrap();
    let mut delta_ref_object = repo
        .db()
        .unwrap()
        .to_owned()
        .read_object("b604578c25b96862b8b77ed8fe8c592fc97b01cf", &mut logger)
        .unwrap();
    assert_eq!(
        delta_ref_object.get_hash_string().unwrap(),
        "b604578c25b96862b8b77ed8fe8c592fc97b01cf"
    );
    assert_eq!(delta_ref_object.type_str(), "tree");
    assert_eq!(
        delta_ref_object.content(None).unwrap(),
        [
            49, 48, 48, 54, 52, 52, 32, 98, 114, 97, 110, 99, 104, 95, 109, 97, 110, 97, 103, 101,
            114, 46, 114, 115, 0, 84, 168, 200, 77, 5, 219, 36, 151, 97, 247, 90, 145, 76, 127,
            171, 150, 75, 152, 184, 233, 52, 48, 48, 48, 48, 32, 99, 104, 97, 110, 103, 101, 115,
            95, 99, 111, 110, 116, 114, 111, 108, 108, 101, 114, 95, 99, 111, 109, 112, 111, 110,
            101, 110, 116, 115, 0, 215, 157, 116, 61, 86, 58, 41, 197, 29, 190, 185, 10, 150, 227,
            175, 245, 22, 87, 138, 163, 49, 48, 48, 54, 52, 52, 32, 99, 111, 109, 109, 97, 110,
            100, 95, 101, 114, 114, 111, 114, 115, 46, 114, 115, 0, 236, 121, 100, 205, 16, 102,
            34, 209, 77, 59, 169, 176, 209, 154, 217, 209, 158, 127, 125, 147, 49, 48, 48, 54, 52,
            52, 32, 99, 111, 110, 102, 105, 103, 46, 114, 115, 0, 32, 18, 38, 101, 156, 136, 58,
            51, 87, 28, 11, 95, 62, 52, 183, 236, 254, 67, 15, 159, 52, 48, 48, 48, 48, 32, 100,
            105, 102, 102, 95, 99, 111, 109, 112, 111, 110, 101, 110, 116, 115, 0, 105, 226, 19,
            53, 7, 127, 105, 75, 39, 3, 28, 110, 33, 42, 95, 191, 154, 3, 244, 28, 49, 48, 48, 54,
            52, 52, 32, 102, 105, 108, 101, 95, 99, 111, 109, 112, 114, 101, 115, 115, 111, 114,
            46, 114, 115, 0, 186, 156, 20, 65, 214, 108, 137, 199, 53, 182, 210, 213, 67, 162, 177,
            253, 22, 4, 205, 171, 49, 48, 48, 54, 52, 52, 32, 103, 105, 116, 95, 114, 101, 112,
            111, 115, 105, 116, 111, 114, 121, 46, 114, 115, 0, 219, 27, 232, 127, 79, 95, 193, 95,
            54, 204, 112, 29, 31, 87, 115, 155, 76, 30, 115, 128, 49, 48, 48, 54, 52, 52, 32, 108,
            105, 98, 46, 114, 115, 0, 87, 60, 50, 210, 195, 158, 118, 51, 30, 19, 121, 92, 127, 88,
            205, 227, 32, 184, 81, 77, 49, 48, 48, 54, 52, 52, 32, 108, 111, 103, 103, 101, 114,
            46, 114, 115, 0, 10, 141, 123, 108, 76, 147, 240, 252, 21, 135, 66, 104, 112, 23, 161,
            183, 242, 2, 166, 122, 49, 48, 48, 54, 52, 52, 32, 108, 111, 103, 103, 101, 114, 95,
            115, 101, 110, 100, 101, 114, 46, 114, 115, 0, 175, 207, 35, 230, 204, 236, 22, 101,
            84, 101, 37, 186, 196, 237, 220, 72, 183, 241, 10, 165, 52, 48, 48, 48, 48, 32, 111,
            98, 106, 101, 99, 116, 115, 0, 53, 250, 133, 151, 200, 26, 37, 105, 30, 222, 66, 61,
            184, 68, 144, 156, 125, 46, 240, 148, 49, 48, 48, 54, 52, 52, 32, 111, 98, 106, 101,
            99, 116, 115, 95, 100, 97, 116, 97, 98, 97, 115, 101, 46, 114, 115, 0, 111, 214, 46,
            221, 124, 40, 247, 163, 81, 255, 30, 185, 90, 128, 78, 39, 242, 62, 12, 248, 52, 48,
            48, 48, 48, 32, 115, 101, 114, 118, 101, 114, 95, 99, 111, 109, 112, 111, 110, 101,
            110, 116, 115, 0, 117, 62, 206, 224, 29, 136, 14, 103, 235, 39, 57, 48, 71, 210, 131,
            236, 220, 216, 69, 34, 49, 48, 48, 54, 52, 52, 32, 115, 116, 97, 103, 105, 110, 103,
            95, 97, 114, 101, 97, 46, 114, 115, 0, 161, 80, 250, 16, 36, 197, 184, 43, 217, 188,
            151, 242, 175, 153, 32, 172, 191, 7, 122, 169, 52, 48, 48, 48, 48, 32, 117, 116, 105,
            108, 115, 0, 43, 92, 116, 53, 245, 55, 47, 191, 184, 105, 119, 52, 196, 1, 205, 103,
            159, 66, 160, 163
        ]
    );

    let mut delta_object_of_several_layers_with_delta_ref = repo
        .db()
        .unwrap()
        .to_owned()
        .read_object(
            "42ac940a10b3808ebfe3c00a728d610fd238cd00",
            &mut Logger::new_dummy(),
        )
        .unwrap();
    assert_eq!(
        delta_object_of_several_layers_with_delta_ref
            .get_hash_string()
            .unwrap(),
        "42ac940a10b3808ebfe3c00a728d610fd238cd00"
    );

    let _ = std::fs::remove_dir_all(repo_path);
}
